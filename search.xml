<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>建造者模式</title>
      <link href="/2019/12/23/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/index/"/>
      <url>/2019/12/23/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/index/</url>
      
        <content type="html"><![CDATA[<h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>建造者模式是创建型模式的一种，能够写出优美的函数式编程结构，增加代码的可读性。简单来说，用一个内部建造器来一步一步创建这个对象，建造器的作用就是创建好这个对象的属性，比如这个人入职了，她去办理入职手续，完成了哪一步就有了哪一步的信息，并不是一次性就把全部的信息都给完善了。当我们在公司需要一个人的信息的时候，我们只需要知道这个人叫什么，工号是啥，我们就能准确的找到这个人，而这个人拥有很多的属性，比如年龄、入职时长等等，这些信息并不是我们关注的信息。简单列举了创建情况以及使用情况的特列。</p><p><strong>若只是需要全部代码，请直接到文末。</strong></p><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><p>当具有多个参数，每次计算不一定需要所有参数，并且不知道是否还会添加新的参数的情况下，建议使用这个模式进行创建。</p><p><strong>优缺点：</strong></p><p>与构造函数相比，构造函数的一个小优点是构造函数可以有多个变量参数，因为每个参数都是在自己的方法中指定的。或者，构建器可以将传递给一个方法的多个调用的参数聚合到单个字段中。</p><p>建造者模式非常灵活。一个构建器可以多次用于构建多个对象。构建器的参数可以在构建方法的调用之间进行调整，以改变创建的对象。构建器可以在创建对象时自动填充某些字段，例如在每次创建对象时增加的序列号。</p><p>建造者模式也有缺点。为了创建一个对象，你必须首先创建它的构建器。虽然在实际应用中创建这个构建器的成本可能并不显著，但在以性能为关键的场景下，这可能会是一个问题。而且，建造者模式比可伸缩构造函数模式更冗长，<strong>因此只有在有足够多的参数时才值得使用，比如有 4 个或更多参数时，才应该使用它。但是请记住，你可能希望在将来添加更多的参数。</strong>但是，如果你以构造函数或静态工厂开始，直至类扩展到参数数量无法控制的程度时，也会切换到构建器，但是过时的构造函数或静态工厂将很难处理。因此，最好一开始就从构建器开始。</p><p>总之，在设计构造函数或静态工厂的类时，建造者模式是一个很好的选择，特别是当许多参数是可选的或具有相同类型时。与可伸缩构造函数相比，使用构建器客户端代码更容易读写，而且构建器比 JavaBean 更安全。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>先看怎么使用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author yansdouble */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuilderTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HelloBuilder hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloBuilder</span>                <span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">"yans"</span><span class="token punctuation">,</span> <span class="token number">32440</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withEnglishName</span><span class="token punctuation">(</span><span class="token string">"double"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">ability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个和一堆set、get相比，那个看着舒服一目了然吧，直接开始用。</p><h6 id="第一步-定义好基本的私有属性"><a href="#第一步-定义好基本的私有属性" class="headerlink" title="第一步 定义好基本的私有属性"></a>第一步 定义好基本的私有属性</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HelloBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> jobNum<span class="token punctuation">;</span>    <span class="token keyword">private</span> String englishName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double salary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>两个注意事项，第一个类设置为final属性，因为我们设置这个类就不希望外部随便修改我们的属性，也具有一定的安全性。第二个，我定义的两个属性name和jobNum是必须有的属性，传入之后不希望在随意改变，因此这两个属性我也同样定义为final类型。</p><h6 id="第二步，定义构造器"><a href="#第二步，定义构造器" class="headerlink" title="第二步，定义构造器"></a>第二步，定义构造器</h6><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token function">HelloBuilder</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> builder<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>englishName <span class="token operator">=</span> builder<span class="token punctuation">.</span>englishName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jobNum <span class="token operator">=</span> builder<span class="token punctuation">.</span>jobNum<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> builder<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> builder<span class="token punctuation">.</span>salary<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> builder<span class="token punctuation">.</span>year<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>构造函数必须是私有化的，这样外部才不能随意的访问。看到builder，应该就能知道需要一个类为builder，来赋值。</p><h6 id="第三步-定义内部构造器"><a href="#第三步-定义内部构造器" class="headerlink" title="第三步 定义内部构造器"></a>第三步 定义内部构造器</h6><p>内部构造器最大的特点就是，除构建方法外所有方法的返回均设置为自己，这样就能够返回所需要的最终组合类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> jobNum<span class="token punctuation">;</span>        <span class="token keyword">private</span> String englishName<span class="token punctuation">;</span>        <span class="token keyword">private</span> Double salary<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必须参数</span>        <span class="token keyword">public</span> <span class="token function">Builder</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer jobNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>jobNum <span class="token operator">=</span> jobNum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">withAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">withEnglishName</span><span class="token punctuation">(</span>String englishName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>englishName <span class="token operator">=</span> englishName<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">withSalary</span><span class="token punctuation">(</span>Double salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">withYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> HelloBuilder <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloBuilder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h6 id="部分方法"><a href="#部分方法" class="headerlink" title="部分方法"></a>部分方法</h6><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//仅需要部分信息</span>    <span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//仅需要部分信息进行计算</span>    <span class="token keyword">public</span> String <span class="token function">ability</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"未初始化"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这个部分方法的展示，只是为了讲述特点，比如，info中并不关心是否拥有了age以及year属性，而能力方法中非常关心这两个属性，这样我们在自己的方法中使用自己需要的参数即可，并不关心其他的参数。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>建造者模式在很多源码中都有使用，之前不知天高地厚直接看netty源码，而最开始的<strong>BootStrap</strong>类看的一知半解，今日在看《effect java》中看到这个描述，知道这是建造者模式之后，在回顾，对此有了新的理解，前辈们的智慧，致敬。</p><p><strong>想看这个实践的话，推荐看netty中的BootStrap源码，写的更好。</strong></p><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><p><strong>HelloBuilder类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> builder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yansdouble */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HelloBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> jobNum<span class="token punctuation">;</span>    <span class="token keyword">private</span> String englishName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double salary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">HelloBuilder</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> builder<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>englishName <span class="token operator">=</span> builder<span class="token punctuation">.</span>englishName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jobNum <span class="token operator">=</span> builder<span class="token punctuation">.</span>jobNum<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> builder<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> builder<span class="token punctuation">.</span>salary<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> builder<span class="token punctuation">.</span>year<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> jobNum<span class="token punctuation">;</span>        <span class="token keyword">private</span> String englishName<span class="token punctuation">;</span>        <span class="token keyword">private</span> Double salary<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必须参数</span>        <span class="token keyword">public</span> <span class="token function">Builder</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer jobNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>jobNum <span class="token operator">=</span> jobNum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">withAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">withEnglishName</span><span class="token punctuation">(</span>String englishName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>englishName <span class="token operator">=</span> englishName<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">withSalary</span><span class="token punctuation">(</span>Double salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">withYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> HelloBuilder <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloBuilder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//仅需要部分信息</span>    <span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//仅需要部分信息进行计算</span>    <span class="token keyword">public</span> String <span class="token function">ability</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"未初始化"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>test类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> builder<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yansdouble */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuilderTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HelloBuilder hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloBuilder</span>                <span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">"yans"</span><span class="token punctuation">,</span> <span class="token number">32440</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withEnglishName</span><span class="token punctuation">(</span><span class="token string">"double"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">ability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 建造者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM之class文件结构</title>
      <link href="/2019/12/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E4%B9%8Bclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/index/"/>
      <url>/2019/12/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E4%B9%8Bclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/index/</url>
      
        <content type="html"><![CDATA[<h2 id="深入理解JVM之class文件结构"><a href="#深入理解JVM之class文件结构" class="headerlink" title="深入理解JVM之class文件结构"></a>深入理解JVM之class文件结构</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>​        虽然class文件结构很枯燥，但是如果你对这个一点都不了解，也是不行的，我还是硬着头皮看了看，我总结一下这玩意到底是怎么玩的。</p><h4 id="初识-class"><a href="#初识-class" class="headerlink" title="初识.class"></a>初识.class</h4><p>​        都知道java文件编译之后是.class文件，好奇的你是否打开过class文件呢。肯定打开过吧，不出意外肯定是一堆乱码。哈哈哈~~正常现象，稍安勿躁。如果是win下建议使用notepad++来操作，安装HEX-Editer插件，view in 8bit，这样分析最好分析，一个字节8个bit位，这样每一个格子就是一个字节，就很好分析了。</p><h4 id="怎么玩"><a href="#怎么玩" class="headerlink" title="怎么玩"></a>怎么玩</h4><p>​        首先得知道一点，文件的结构是固定的。不管你是看书还是看别人的博客，总会有人告诉你先是魔数，什么cafababe，之类之类。对，确实是这样。追本溯源是因为虚拟机规定好了，以什么结构去存储这个文件，就好比你写的程序必须有主方法一样，规定好的。所以，我决定先把文件结构展示在这里，回头你在回来找也是很方便，先教你怎么玩，如果你有心可以先试试，然后在举例子。</p><p>​        书中的说法：Class文件结构不像是xml等描述性语言，由于它没有任何的分隔符，因此无论是顺序还是数量，甚至于数据的字节序，这样的细节，都是严格限定的，那个字节代表什么含义，长度是多少，先后顺序如何，都不允许改变。——————–总结一句话，怎么玩是固定的。（对着书玩~~）</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u4</td><td>magic</td><td>1</td></tr><tr><td>u2</td><td>minor_version</td><td>1</td></tr><tr><td>u2</td><td>major_version</td><td>1</td></tr><tr><td>u2</td><td>constant_pool_count</td><td>1</td></tr><tr><td>cp_info</td><td>constant_pool</td><td>constant_pool_count-1</td></tr><tr><td>u2</td><td>access_flags</td><td>1</td></tr><tr><td>u2</td><td>this_class</td><td>1</td></tr><tr><td>u2</td><td>supper_class</td><td>1</td></tr><tr><td>u2</td><td>interfaces_count</td><td>1</td></tr><tr><td>u2</td><td>interfaces</td><td>interfaces_count</td></tr><tr><td>u2</td><td>fields_count</td><td>1</td></tr><tr><td>field_info</td><td>fields</td><td>fields_count</td></tr><tr><td>u2</td><td>methods_count</td><td>1</td></tr><tr><td>method_info</td><td>methods</td><td>methods_count</td></tr><tr><td>u2</td><td>attributes_count</td><td>1</td></tr><tr><td>attribute_info</td><td>attributes</td><td>attributes_count</td></tr></tbody></table><p>​        是不是感觉很多，很乱，别急，其实没那么难。</p><h5 id="第一步-玩法规则"><a href="#第一步-玩法规则" class="headerlink" title="第一步   玩法规则"></a>第一步   玩法规则</h5><ol><li><p>先看第一列，u后面是几就表示几个字节，比如u4，就表示占了4个字节，而info表示是一个表格。表格里面的样式其实还是和现在这种类似，几个字节几个字节拼起来。</p></li><li><p>偏移量：这个名词的意思就是偏移多少，在计算机内存中，根据偏移量能够很快找到想找到的元素。</p></li><li><p>我们总是先规定好偏移量，先表明占用多少空间，然后接下来的空间的字节就是它的内容。</p></li></ol><h5 id="第二步-开始玩魔数和常量池"><a href="#第二步-开始玩魔数和常量池" class="headerlink" title="第二步 开始玩魔数和常量池"></a>第二步 开始玩魔数和常量池</h5><p><img src="https://yansweb.github.io/images/2.png" alt="image-20191219205541100"></p><p>​        对照定义好的圣经，我们打开一个class文件。</p><ol><li>首先，u4，magic，就是常常说的魔数，四个字节，正好就是ca fa ba be，这是属于java人的浪漫。</li><li>接下来u2，两个字节就是jdk的次版本号。</li><li>接下来u2，两个字节是jdk的主版本号。我这里是34对应就是1.8的jdk，1.8.0_91，所以前面的都是0。</li><li>u2，常量池的大小（96,6*16+0=96），回想规则的第三点。先定义好常量池的大小，然后接下来的空间就存放常量池的字节。info就理解为一个新的表格，同样开头也定义表的大小，接下来就是表的内容，不过每个表同样也是确定的，理解起来也是和这个类似。</li><li>接下来是09，对应的表的标志就是9，存的就是CONSTANT_Fieldref_info的表结构。看它的结构，接下来的index两个字节指向新的表结构，同样的分析法，就不赘述了。至于完整的表书上太大了，实在不想完全输入，容许我偷个懒。</li></ol><p>我列举个例子，然后讲述怎么分析，常量池其余的就靠你自己了！</p><table><thead><tr><th>类型</th><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>CONSTANT_Fieldref_info</td><td>9</td><td>字段的符号引用</td></tr></tbody></table><p>CONSTANT_Fieldref_info结构</p><table><thead><tr><th>类型</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>值为9</td></tr><tr><td>u2</td><td>index</td><td>指向声明字段的类或接口的描述符CONSTANT_Class_info的索引项</td></tr><tr><td>u2</td><td>index</td><td>指向CONSTANT_NameAndType的索引项</td></tr></tbody></table><h5 id="第三步-转折"><a href="#第三步-转折" class="headerlink" title="第三步 转折"></a>第三步 转折</h5><p>有点模糊或者不太明白，没关系。上面说了一堆，什么表呀，什么的，总结出来就是对计算机能看懂的01码进行反汇编，汇编成我们能看懂的代码，其实不知道怎么对应也没关系，人类高级的地方就在知道怎么使用工具。介绍两种，一种是使用javap命令，而另一种是使用idea插件jclasslib。</p><p>两种工具，各有优势，第一种javap更加底层一些，个人建议先了解一下javap执行之后的结果（知道文件中具体的内容之后），然后在使用插件，这样能够更加有效的理解这些东西，每个区具体的值是什么。</p><h5 id="第四步-反编译"><a href="#第四步-反编译" class="headerlink" title="第四步 反编译"></a>第四步 反编译</h5><p>到你存放class文件的目录下，用javap -v打开文件。首先是文件的基本信息，位置之类的，这些不重要。</p><p>主要部分如下：</p><p><img src="https://yansweb.github.io/images/3.png" alt="image-20191222181318721"></p><p>这些其实往第一个表格看，其实就是那些东西。从文件结构来看，可以发现，最关键的几个部分，分别为：</p><p><img src="https://yansweb.github.io/images/4.png" alt="image-20191222184336210"></p><ol><li>魔数与jdk版本</li></ol><p>对应就是这些内容。</p><pre><code>public class gc.GC  minor version: 0  major version: 52</code></pre><ol start="2"><li>常量池：对应就是Constant pool:里面的内容</li></ol><ol start="3"><li>访问标志：ACC_PUBLIC, ACC_SUPER这些标志就是对应的访问标志。</li></ol><ol start="4"><li>类索引、父类索引、接口索引：对应interfaces中的内容。继承的类，实现的接口。</li></ol><ol start="5"><li>字段表集合：对应类中的参数，定义了那些参数。</li></ol><ol start="6"><li>方发表集合：methods内容，对应为每一个方法的内容。</li></ol><ol start="7"><li>属性表集合：Attributies内容。</li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>感觉这些东西只是一个引子，大概了解一些内容，有哪些东西，这些东西都存放那些内容，对后续理解加载进入运行时内存中有帮助理解的作用。知道加载了什么，存放在那里等等。</p><p>文中重点讲解了两部分，01的二进制怎么对应反编译之后的文件，另一部分讲述了class文件中有什么，至于这些东西是干什么的，没有进一步解释，空口说是干啥的，也不好理解，等到后续可能会详细说明。</p><p>附录：</p><p>java文件内容：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> gc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author :yangshuang1 * @date :2019/11/29 16:38 * @description : * @Version : */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GC</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> f<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> String name <span class="token operator">=</span> <span class="token string">"double"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        int i = c = 1;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"double"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token string">"equals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token string">"not euqals!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>class文件内容：</p><pre><code>Classfile /D:/soft/work/idea/workpalces/leetcode/out/production/leetcode/gc/GC.class  Last modified 2019��12��10��; size 1504 bytes  MD5 checksum 7be6647c2eec7cf78e1171118e41d0ca  Compiled from &quot;GC.java&quot;public class gc.GC  minor version: 0  major version: 52  flags: (0x0021) ACC_PUBLIC, ACC_SUPER  this_class: #23                         // gc/GC  super_class: #24                        // java/lang/Object  interfaces: 0, fields: 7, methods: 4, attributes: 2Constant pool:   #1 = Fieldref           #23.#55        // gc/GC.name:Ljava/lang/String;   #2 = Methodref          #24.#56        // java/lang/Object.&quot;&lt;init&gt;&quot;:()V   #3 = Fieldref           #23.#57        // gc/GC.b:I   #4 = Fieldref           #23.#58        // gc/GC.e:I   #5 = Class              #59            // java/lang/Thread   #6 = Class              #60            // gc/GC$1   #7 = Methodref          #6.#56         // gc/GC$1.&quot;&lt;init&gt;&quot;:()V   #8 = Methodref          #5.#61         // java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V   #9 = Methodref          #5.#62         // java/lang/Thread.start:()V  #10 = Fieldref           #23.#63        // gc/GC.c:I  #11 = String             #64            // double  #12 = Methodref          #65.#66        // java/lang/String.equals:(Ljava/lang/Object;)Z  #13 = Fieldref           #67.#68        // java/lang/System.out:Ljava/io/PrintStream;  #14 = Class              #69            // java/lang/StringBuilder  #15 = Methodref          #14.#56        // java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V  #16 = Methodref          #14.#70        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;  #17 = String             #71            // equals  #18 = Methodref          #14.#72        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;  #19 = Methodref          #14.#73        // java/lang/StringBuilder.toString:()Ljava/lang/String;  #20 = Methodref          #74.#75        // java/io/PrintStream.println:(Ljava/lang/String;)V  #21 = String             #76            // not euqals!!  #22 = Fieldref           #23.#77        // gc/GC.d:I  #23 = Class              #78            // gc/GC  #24 = Class              #79            // java/lang/Object  #25 = Utf8               InnerClasses  #26 = Utf8               a  #27 = Utf8               I  #28 = Utf8               b  #29 = Utf8               c  #30 = Utf8               d  #31 = Utf8               e  #32 = Utf8               f  #33 = Utf8               name  #34 = Utf8               Ljava/lang/String;  #35 = Utf8               &lt;init&gt;  #36 = Utf8               ()V  #37 = Utf8               Code  #38 = Utf8               LineNumberTable  #39 = Utf8               LocalVariableTable  #40 = Utf8               this  #41 = Utf8               Lgc/GC;  #42 = Utf8               main  #43 = Utf8               ([Ljava/lang/String;)V  #44 = Utf8               args  #45 = Utf8               [Ljava/lang/String;  #46 = Utf8               StackMapTable  #47 = Class              #79            // java/lang/Object  #48 = Class              #80            // java/lang/Throwable  #49 = Utf8               access$002  #50 = Utf8               (Ljava/lang/String;)Ljava/lang/String;  #51 = Utf8               x0  #52 = Utf8               &lt;clinit&gt;  #53 = Utf8               SourceFile  #54 = Utf8               GC.java  #55 = NameAndType        #33:#34        // name:Ljava/lang/String;  #56 = NameAndType        #35:#36        // &quot;&lt;init&gt;&quot;:()V  #57 = NameAndType        #28:#27        // b:I  #58 = NameAndType        #31:#27        // e:I  #59 = Utf8               java/lang/Thread  #60 = Utf8               gc/GC$1  #61 = NameAndType        #35:#81        // &quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V  #62 = NameAndType        #82:#36        // start:()V  #63 = NameAndType        #29:#27        // c:I  #64 = Utf8               double  #65 = Class              #83            // java/lang/String  #66 = NameAndType        #71:#84        // equals:(Ljava/lang/Object;)Z  #67 = Class              #85            // java/lang/System  #68 = NameAndType        #86:#87        // out:Ljava/io/PrintStream;  #69 = Utf8               java/lang/StringBuilder  #70 = NameAndType        #88:#89        // append:(I)Ljava/lang/StringBuilder;  #71 = Utf8               equals  #72 = NameAndType        #88:#90        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;  #73 = NameAndType        #91:#92        // toString:()Ljava/lang/String;  #74 = Class              #93            // java/io/PrintStream  #75 = NameAndType        #94:#95        // println:(Ljava/lang/String;)V  #76 = Utf8               not euqals!!  #77 = NameAndType        #30:#27        // d:I  #78 = Utf8               gc/GC  #79 = Utf8               java/lang/Object  #80 = Utf8               java/lang/Throwable  #81 = Utf8               (Ljava/lang/Runnable;)V  #82 = Utf8               start  #83 = Utf8               java/lang/String  #84 = Utf8               (Ljava/lang/Object;)Z  #85 = Utf8               java/lang/System  #86 = Utf8               out  #87 = Utf8               Ljava/io/PrintStream;  #88 = Utf8               append  #89 = Utf8               (I)Ljava/lang/StringBuilder;  #90 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;  #91 = Utf8               toString  #92 = Utf8               ()Ljava/lang/String;  #93 = Utf8               java/io/PrintStream  #94 = Utf8               println  #95 = Utf8               (Ljava/lang/String;)V{  public gc.GC();    descriptor: ()V    flags: (0x0001) ACC_PUBLIC    Code:      stack=2, locals=1, args_size=1         0: aload_0         1: invokespecial #2                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V         4: aload_0         5: iconst_1         6: putfield      #3                  // Field b:I         9: aload_0        10: iconst_1        11: putfield      #4                  // Field e:I        14: return      LineNumberTable:        line 12: 0        line 15: 4        line 21: 9      LocalVariableTable:        Start  Length  Slot  Name   Signature            0      15     0  this   Lgc/GC;  public static void main(java.lang.String[]);    descriptor: ([Ljava/lang/String;)V    flags: (0x0009) ACC_PUBLIC, ACC_STATIC    Code:      stack=4, locals=3, args_size=1         0: new           #5                  // class java/lang/Thread         3: dup         4: new           #6                  // class gc/GC$1         7: dup         8: invokespecial #7                  // Method gc/GC$1.&quot;&lt;init&gt;&quot;:()V        11: invokespecial #8                  // Method java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V        14: invokevirtual #9                  // Method java/lang/Thread.start:()V        17: iconst_0        18: putstatic     #10                 // Field c:I        21: getstatic     #10                 // Field c:I        24: sipush        10000        27: if_icmpge     125        30: getstatic     #1                  // Field name:Ljava/lang/String;        33: dup        34: astore_1        35: monitorenter        36: ldc           #11                 // String double        38: getstatic     #1                  // Field name:Ljava/lang/String;        41: invokevirtual #12                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z        44: ifeq          77        47: getstatic     #13                 // Field java/lang/System.out:Ljava/io/PrintStream;        50: new           #14                 // class java/lang/StringBuilder        53: dup        54: invokespecial #15                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V        57: getstatic     #10                 // Field c:I        60: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;        63: ldc           #17                 // String equals        65: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;        68: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;        71: invokevirtual #20                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V        74: goto          104        77: getstatic     #13                 // Field java/lang/System.out:Ljava/io/PrintStream;        80: new           #14                 // class java/lang/StringBuilder        83: dup        84: invokespecial #15                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V        87: getstatic     #10                 // Field c:I        90: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;        93: ldc           #21                 // String not euqals!!        95: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;        98: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;       101: invokevirtual #20                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V       104: aload_1       105: monitorexit       106: goto          114       109: astore_2       110: aload_1       111: monitorexit       112: aload_2       113: athrow       114: getstatic     #10                 // Field c:I       117: iconst_1       118: iadd       119: putstatic     #10                 // Field c:I       122: goto          21       125: return      Exception table:         from    to  target type            36   106   109   any           109   112   109   any      LineNumberTable:        line 30: 0        line 35: 14        line 37: 17        line 38: 30        line 39: 36        line 40: 47        line 42: 77        line 44: 104        line 37: 114        line 46: 125      LocalVariableTable:        Start  Length  Slot  Name   Signature            0     126     0  args   [Ljava/lang/String;      StackMapTable: number_of_entries = 6        frame_type = 21 /* same */        frame_type = 252 /* append */          offset_delta = 55          locals = [ class java/lang/Object ]        frame_type = 26 /* same */        frame_type = 68 /* same_locals_1_stack_item */          stack = [ class java/lang/Throwable ]        frame_type = 250 /* chop */          offset_delta = 4        frame_type = 10 /* same */  static java.lang.String access$002(java.lang.String);    descriptor: (Ljava/lang/String;)Ljava/lang/String;    flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC    Code:      stack=2, locals=1, args_size=1         0: aload_0         1: dup         2: putstatic     #1                  // Field name:Ljava/lang/String;         5: areturn      LineNumberTable:        line 12: 0      LocalVariableTable:        Start  Length  Slot  Name   Signature            0       6     0    x0   Ljava/lang/String;  static {};    descriptor: ()V    flags: (0x0008) ACC_STATIC    Code:      stack=1, locals=0, args_size=0         0: iconst_1         1: putstatic     #22                 // Field d:I         4: ldc           #11                 // String double         6: putstatic     #1                  // Field name:Ljava/lang/String;         9: return      LineNumberTable:        line 19: 0        line 25: 4}SourceFile: &quot;GC.java&quot;InnerClasses:  static #6;                              // class gc/GC$1</code></pre>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> 深入理解java虚拟机 </tag>
            
            <tag> class文件结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM之初识java运行时数据区</title>
      <link href="/2019/12/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E4%B9%8B%E5%88%9D%E8%AF%86java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/index/"/>
      <url>/2019/12/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E4%B9%8B%E5%88%9D%E8%AF%86java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/index/</url>
      
        <content type="html"><![CDATA[<h2 id="深入理解JVM之初识java运行时数据区"><a href="#深入理解JVM之初识java运行时数据区" class="headerlink" title="深入理解JVM之初识java运行时数据区"></a>深入理解JVM之初识java运行时数据区</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>​        通俗来说就是运行时的所需要的内存的数据结构。java虚拟机在执行java程序的过程中会将它管理的内存划分为若干个不同的数据区域。这些区域我们称之为java运行时数据区域。图示如下：</p><p><img src="https://yansweb.github.io/images/1.png" alt="image-20191208164646404"></p><p>​         这里运行时数据区域分为两类，一个是线程私有，一个是公有。这里有必要详细说明一下：当.class文件加载进入运行时数据区时，理解为加载进入方法区以及堆中，当执行到当前类的方法时候，才会在栈中进行处理，并不是将文件加载进入运行时数据区的时候就已经存在栈内存。栈的先进后出原理，很容易帮助我们进行计算的操作，比如用栈实现计算器。在执行一个方法的时候，需要栈进行辅助，此时想象为计算器进行计算。而输入的数据，还没有点击计算之前，想象为数据存放在方法区以及堆中。</p><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>​          通俗来说就是一个记录执行到哪里的一个存储器。程序计数器是一块很小的内存空间，可理解为当前线程所执行的字节码行号指示器。如果看过字节码文件咋知道，一个方法，是存在行号的，所以程序计数器其实就是当前执行的行号，当完成当前操作时，去找当前行号的下一个行号。每一个方法都有自己的行号，因此在执行时，每一个线程都有自己的程序计数器。</p><h4 id="java虚拟机栈"><a href="#java虚拟机栈" class="headerlink" title="java虚拟机栈"></a>java虚拟机栈</h4><p>​        直观来讲就是一个大的栈中存在很多小的栈来完成计算。虚拟机栈的数据结构是数据结构中的栈，满足FILO原则。虚拟机栈描述的是java方法执行的内存模型：每个方法在执行的时候都会创建一个栈帧用于存放局部变量区、操作数栈、动态链接、方法返回地址等。每一个方法从调用到完成的过程，就对应一个栈帧从虚拟机栈入栈到出栈的过程。</p><p>​        这里也能解释一个东西，日常我们说，new对象是在堆中，栈中存放的是方法引用。举个例子吧，</p><pre class=" language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>想清楚上面的，先明白一点，这句话写在什么地方，肯定在你写这句话的方法（函数）中吧，可能是main方法，也可能是你业务中的某一个方法。方法的模版存放在方法区，在调用这个方法的时候，这个方法会被加载进入虚拟机栈的某个栈帧中，此时执行这句话的时候，由于栈空间很小，为了节约空间将这个new对象放在堆中完成创建，栈中的user来指向堆中创建的对象。所以此时栈存放的是堆中的那个数据的引用（也可理解为指针，但是java中没有指针），也称之为栈内存执行堆内存。啰嗦这一段，只是想让你有一个栈和堆的关系大概苗头。</p><p>​        局部变量表存放了编译期间可知的基本数据类型（八种—-学过java都知道）、对象引用、returnAddress类型。</p><p>​        栈空间也不是无限大的，当栈帧的数量过于多，也就是超过当前栈的最大深度（外面的大栈），就会抛出StackOverflowError的异常，当栈帧的容量过大，一般会先自动扩容，内部的小栈超过最大容量的时候，就会抛出OutOfMemoryError异常。  </p><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>​        这个比较简单，就是在执行native方法的时候，调用本地方法。java中只要是方法，执行都需要栈来辅助。辅助本地方法的栈就叫本地方法栈，这也是唯一一个没有内存溢出的内存空间。</p><h4 id="java堆"><a href="#java堆" class="headerlink" title="java堆"></a>java堆</h4><p>​        这个是最大的地方，是共享的内存区域，也被称之为GC堆。由于基本使用的都是分代算法，因此又分为，老年代和新生代。在细分就是Eden区、From区、to区、老年代区等。java堆是不连续的内存区域，只要逻辑上连续即可，就像我们磁盘空间一样，是可以扩展的，（通过-Xms和-Xmx来控制实现）。</p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>​        方法区与java堆一样，是各个线程共享的区域，它用于存储已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然java虚拟机规范把方法区描述为堆的一部分，但是它却有另一个别名Non-Heap(非堆)，目的应该是与java堆区分开来。当方法区无法满足内存分配的需求时，将抛出OutOfMemoryError异常。</p><p>​        方法区为类加载进入的地方，存储类模版的地方。从性质上来看，一般对于类来说，加载进来存放，基本可以看做是一个大对象。即使某个方法中不运用了，其他方法仍然可能继续运用，感觉他就像堆中的老年代一样，它实际也属于堆中一部分，但是java虚拟机规范中将其区分开来。</p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>​        看过字节码的人应该知道其中有一部分就是常量池，用于存放编译期生成的各种字面量和符号引用。类加载进来会放入方法区，常量池其实就是被加载到这个地方。运行时常量池除了保存class文件中描述的符号引用之外，还会把翻译出来的直接引用也存储到运行时常量池中。另一个特性就是具备动态性，并不要求常量一定只有编译期才会产生，也就是并不是只有提前在class文件常量池中的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，一般利用较多的就是String的intern方法。</p><h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><p>​        直接内存不是java虚拟机中的一部分，可以理解为就是计算机内存。这部分频繁使用，同样会造成OOM。显然，本机直接内存的分配不会受到java堆的大小限制，但是既然是内存，肯定还是会受到本机总内存大小限制。一般分配服务器内存时，通常会忽略这部分，会根据实际内存设置-Xmx等参数信息，但是经常忽略直接内存，是的各个内存区域总和大于物理内存限制，从而OOM。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>深入理解jvm这本书前面部分确实比较浅，根据书只能整理出这么多，后续逐渐章节深入，会持续进行学习整理。</p>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> 深入理解java虚拟机 </tag>
            
            <tag> 运行时数据区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList的remove</title>
      <link href="/2019/12/16/ArrayList%E7%9A%84remove/index/"/>
      <url>/2019/12/16/ArrayList%E7%9A%84remove/index/</url>
      
        <content type="html"><![CDATA[<h6 id="问题起因"><a href="#问题起因" class="headerlink" title="问题起因"></a>问题起因</h6><p>闲来无事看起了java开发手册，发现一个有意思的地方，我整理了一下，大概如下：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String item <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String item<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>手册说禁止使用上面的方法，我就很奇怪，没毛病呀，为啥呢，一运行报错了。我先尝试了“1”情况，输出2很正常，但是变为2的时候，输出如下：</p><pre class=" language-java"><code class="language-java">Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ConcurrentModificationException    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList$Itr<span class="token punctuation">.</span><span class="token function">checkForComodification</span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">901</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList$Itr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">851</span><span class="token punctuation">)</span>    at Main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>为什么会这样呢，我就去研究了一下。</p><h6 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h6><p>先查看哪里出错了呢！找到了位置如下：</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>显然是modCount与exceptedModCount不同造成的，然后对两个参数分析。<br>分析modCount，发现这个变量是继承父类AbstractList而来，默认值为0。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>可是这个变量什么时候尽心改变的呢？这个时候需要追本溯源了，为啥会比较两个值，是因为ArrayList即从List中继承了iterator()，又从AbstractList中继承了list。<br><strong>为什么呢，是为了实现ArrayList的Fail-Fast机制。Fail-Fast机制的作用是避免ArrayList在迭代过程中数组结构发生变化的问题。</strong><br>所以会进行两个数据的判断，查看是否改变了数据结构。查看一下AbstractList中的iterator()方法。<br>idk1.8如下：</p><p><code>public Iterator&lt;E&gt; iterator() {        return listIterator();    }</code><br>   只是返回了一个Iterator<E>的数据结构，在进一步查看listIterator()方法</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>调用了listIterator(0)这个方法，注意传入了新的参数，不是之前的那个方法了，进一步剖析！！发现下面一个方法只是先判断是否数组下标越界，然后返回了一个新的数据结构。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListItr</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cursor <span class="token operator">!=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>                E next <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> i<span class="token punctuation">;</span>                cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> next<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                AbstractList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> cursor<span class="token punctuation">)</span>                    cursor<span class="token operator">--</span><span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里省略了一步，他继承了Itr，直接分析Itr容易理解。重要是对上面的四个值进行变化分析：</p><p>代码拆分理解：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span></code></pre><p>　　cursor：表示下一个要访问的元素的索引，从next()方法的具体实现就可看出</p><p>　　lastRet：表示上一个访问的元素的索引</p><p>　　expectedModCount：表示对ArrayList修改次数的期望值，它的初始值为modCount。</p><p>　　modCount是AbstractList类中的变量，前面分析到过，该值表示对List的修改次数<br>　　<br>接着是hasNext()方法，判断访问是否还有未访问的值！！！！</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cursor <span class="token operator">!=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>紧接着执行next，可能有人问，你是foreach呀，为啥会next呢，对ArrayList进行遍历的时候，其实就是执行的next，因此分析next！！！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>                E next <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> i<span class="token punctuation">;</span>                cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> next<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>checkForComodification()方法就是之前说，判断数据结构是否发生改变的，也就是进行比较查看这中间当前的list中的数据是否发生了改变。每次增加修改等操作都会对modCount进行+1操作，exceptedModCount初始值就是modCount。</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>继续分析next方法：现将下一个要访问的元素用i进行存储，然后获取下一个元素next，最后一次操作的元素变为i，下一个元素跟新为i+1，然后返回要操作的元素next。此时最值得注意点就是，modCount与exceptedModCount的值相等，都为0。<br>然后执行remove方法，调用了ArrayList中的remove()方法：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span>    <span class="token punctuation">}</span></code></pre><p>较为关键在每次remove方法都会遍历当前数据，判断是否存在，如果存在调用fastRemove方法，而这里面 modCount++是第一步操作 ，再操作之前modCount就为1了，而此时执行判断时，两者不想等，自然会报错。我们在分析一下为什么第一个不会报异常，看源码可以看出，倒数第一个元素的时候，Itr的cursor是1，当list删除掉一个元素的时候，size也是等于1，所以在判断的时候，cursor==size，因此就会在删除了一个元素以后，直接跳出循环，所以不会报异常了。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>foreach遍历内部也就是与iterator一致，实例化为iterator对象。从之前的源码可以看出，在remove的过程中，modCount会改变，因此在一个循环中我们不要同时采用两种方法。如下：</p><pre class=" language-java"><code class="language-java">        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String s<span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equsls</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>这样是与之前的foreach循环属于同样的情况，值得注意。另外，</p><h1 id="不要在-foreach-循环里进行元素的-remove-add-操作。remove-元素请使用-Iterator方式，如果并发操作，需要对-Iterator-对象加锁。"><a href="#不要在-foreach-循环里进行元素的-remove-add-操作。remove-元素请使用-Iterator方式，如果并发操作，需要对-Iterator-对象加锁。" class="headerlink" title="不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。"></a><strong>不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。</strong></h1><p>上面的正确写法如下：</p><pre class=" language-java"><code class="language-java">        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String item <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>参考：阿里巴巴Java开发手册终极版v1.3.0.pdf</p><p>积土成山，风雨兴焉！！！</p>]]></content>
      
      
      <categories>
          
          <category> java随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arrayList的remove </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/16/hello-world/"/>
      <url>/2019/12/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot中的事务回滚</title>
      <link href="/2019/06/18/springboot%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A/index/"/>
      <url>/2019/06/18/springboot%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A/index/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot中的事务回滚"><a href="#springboot中的事务回滚" class="headerlink" title="springboot中的事务回滚"></a>springboot中的事务回滚</h2><p>事务回滚在企业级开发中实用较为频繁，近段时间使用到了，总结一下：</p><p>首先在springboot中是集成了事务的回滚操作了，也就是@Transactional注解。事务的回滚有两种方式，一种是自动回滚，另一种是手动回滚，下面对两种使用稍作总结。</p><h4 id="1：自动回滚"><a href="#1：自动回滚" class="headerlink" title="1：自动回滚"></a>1：自动回滚</h4><p>首先回滚的方法必须是public的，其次在需要回滚的方法上添加@Transactional 这两者为前提条件。自动回滚当然是在发生异常才会回滚，大部分都会强调只能捕获RuntimeException，也就是非检查型异常。这个是没问题的，但是如果不是RuntimeException,你就必须进行处理，也就是捕获，否则程序根本无法正常，不报错。什么意思呢，意思就是没有处理的异常抛出了，才会进行自动回滚。如下：</p><p>失败案列1：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> Boolean <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第一次插入，教师表</span>            Teacher teacher <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>teacher <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//第二次插入，学生表</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里是失败的，当抛出异常之后，异常被catch住了，当然不是没有抛出非检查异常的原因，而是被捕获的异常被处理了，处理后程序默认为处理完成了，就不是异常了，那么正常入库，所以没有回滚。</p><p>成功案列：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> Boolean <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第一次插入，教师表</span>            Teacher teacher <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>teacher <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//第二次插入，学生表</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//唯一区别，在这里</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>在捕获异常的基础上，又抛出了异常，而这次是非检查型异常，就会被回滚了，默认执行到这里，该方法程序出现错误，那么取消本次入库。这里当然你也可以试试在catch中抛出检查型异常试试，你就会明白我说的，报错是什么意思了。</p><h4 id="2：手动回滚"><a href="#2：手动回滚" class="headerlink" title="2：手动回滚"></a>2：手动回滚</h4><p>添加TransactionAspectSupport.currentTransactionStatus().setRollbackOnly(); 语句，这个便是手动回滚语句。</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> Boolean <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第一次插入，教师表</span>            Teacher teacher <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>teacher <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//第二次插入，学生表</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//唯一区别，在这里</span>            TransactionAspectSupport<span class="token punctuation">.</span><span class="token function">currentTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这是手动回滚的例子，其实也不一定非要在catch中添加手动回滚的语句，你同样可以在任何一个地方进行判断然后使用手动回滚语句，会继续之后语句后的所有方法，但是不建议这么使用。</p>]]></content>
      
      
      <categories>
          
          <category> java随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot事务回滚 </tag>
            
            <tag> 事务回滚 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
